{
  "$schema": "https://raw.githubusercontent.com/invoiceradar/plugins/main/schema.json",
  "id": "figma",
  "name": "Figma",
  "description": "Figma is a vector editor and prototyping tool.",
  "homepage": "https://figma.com",
  "configSchema": {
    "teamId": {
      "type": "string",
      "title": "Team ID",
      "description": "The team ID of the Figma team. If empty the default team will be used.",
      "example": "123456789122000001",
      "required": true
    }
  },
  "checkAuth": [
    {
      "action": "navigate",
      "url": "https://www.figma.com/files"
    },
    {
      "action": "checkURL",
      "url": "https://www.figma.com/files/**"
    }
  ],
  "startAuth": [
    {
      "action": "navigate",
      "url": "https://www.figma.com/login"
    },
    {
      "action": "waitForURL",
      "url": "https://www.figma.com/files/**"
    }
  ],
  "getConfigOptions": [
    {
      "action": "navigate",
      "url": "https://www.figma.com/",
      "waitForNetworkIdle": true
    },
    {
      "action": "extractAll",
      "script": "fetch('https://www.figma.com/api/user/plans', {\n  headers: {\n    'content-type': 'application/json',\n  },\n  body: null,\n  method: 'GET',\n  mode: 'cors',\n  credentials: 'include',\n})\n  .then((r) => r.json())\n  .then((r) =>\n    r.meta?.teams.map((team) => ({\n      label: team.name,\n      value: team.id,\n    })),\n  )",
      "variable": "option",
      "forEach": [
        {
          "action": "exposeOption",
          "config": "teamId",
          "option": "{{option}}"
        }
      ]
    }
  ],
  "getDocuments": [
    {
      "action": "navigate",
      "url": "https://www.figma.com/files"
    },
    {
      "action": "extract",
      "variable": "targetTeamId",
      "script": "'{{config.teamId}}' || window.location.href.match(/team\\/(\\d+)/)[1]"
    },
    {
      "action": "extractAll",
      "script": "fetch('https://www.figma.com/api/subscriptions/team/{{targetTeamId}}/invoices')\n  .then((res) => res.json())\n  .then((res) => {\n    if (res.error) {\n      throw new Error(res.message)\n    }\n    return res.meta.map((invoice) => invoice.hosted_invoice_url)\n  })",
      "variable": "stripeUrl",
      "forEach": [
        {
          "action": "runSnippet",
          "snippet": "getInvoiceFromStripeUrl",
          "args": {
            "url": "{{stripeUrl}}"
          }
        }
      ]
    }
  ]
}
